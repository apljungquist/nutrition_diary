{"version":3,"sources":["model.ts","components/Foods.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["sample_foods","List","id","name","quantity","unit","energy","fat","carbohydrates","protein","fmt_g","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","Summary","props","ListGroup","Item","Row","noGutters","Col","food","xs","Button","variant","onClick","onCopy","NutrientInput","Form","Group","Label","InputGroup","FormControl","toLowerCase","placeholder","type","step","onChange","onBlur","className","touched","error","value","Append","Text","Control","Feedback","CreateFoodModal","Modal","show","onHide","discard","initialValues","onSubmit","values","actions","save","validationSchema","yup","shape","required","positive","oneOf","min","errors","handleChange","handleBlur","handleSubmit","isSubmitting","Header","closeButton","Title","Body","as","Footer","disabled","FoodsPage","defaultFoods","useState","foods","setFoods","copying","setCopying","insert","Container","map","nanoid","App","Navbar","expand","bg","Brand","Nav","Link","href","Foods","model","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1931fc6.chunk.js","sourcesContent":["import {List} from 'immutable';\n\n\nexport interface Food {\n    id: string,\n    name: string,\n    quantity: number,\n    unit: string,\n    energy: number,\n    fat: number,\n    carbohydrates: number,\n    protein: number,\n}\n\nexport const sample_foods = List([\n    {\n        id: \"food-0\",\n        name: \"salmon\",\n        quantity: 125,\n        unit: \"g\",\n        energy: 1.25604E+03,\n        fat: 0.6,\n        carbohydrates: 21.2,\n        protein: 28.8,\n    },\n    {\n        id: \"food-1\",\n        name: \"rocket\",\n        quantity: 20,\n        unit: \"g\",\n        energy: 2.51208E+01,\n        fat: 0.4,\n        carbohydrates: 0.0,\n        protein: 0.5,\n    },\n    {\n        id: \"food-2\",\n        name: \"egg\",\n        quantity: 2,\n        unit: \"pcs\",\n        energy: 5.98712E+02,\n        fat: 0.7,\n        carbohydrates: 9.5,\n        protein: 12.8,\n    },\n    {\n        id: \"food-3\",\n        name: \"bacon\",\n        quantity: 100,\n        unit: \"g\",\n        energy: 1.1723E+03,\n        fat: 1.0,\n        carbohydrates: 24.0,\n        protein: 16.0,\n    },\n]);\n\n","import React, {useState} from 'react';\nimport {Button, Col, Container, Form, FormControl, InputGroup, ListGroup, Modal, Row} from 'react-bootstrap';\nimport * as model from '../model';\nimport {List} from 'immutable';\nimport {nanoid} from 'nanoid';\nimport {Formik} from 'formik';\nimport * as yup from 'yup';\n\nfunction fmt_kj(quantity: number) {\n    return quantity.toLocaleString(\n        undefined,\n        {maximumFractionDigits: 0}\n    );\n}\n\nfunction fmt_g(quantity: number) {\n    return quantity.toLocaleString(\n        undefined,\n        {minimumFractionDigits: 1, maximumFractionDigits: 1}\n    );\n}\n\n\nfunction Summary(props: { food: model.Food, onCopy: () => any }) {\n    return (<ListGroup.Item>\n        <Row noGutters>\n            <Col>\n                <Row>{props.food.name} ({props.food.unit})</Row>\n                <Row>\n                    E{fmt_kj(props.food.energy)} /\n                    F{fmt_g(props.food.fat)} /\n                    C{fmt_g(props.food.carbohydrates)} /\n                    P{fmt_g(props.food.protein)}\n                </Row>\n            </Col>\n            <Col xs={\"auto\"}>\n                <Button variant=\"primary\" onClick={props.onCopy}>Copy</Button>\n            </Col>\n        </Row>\n    </ListGroup.Item>)\n}\n\nfunction NutrientInput(props: { name: string, value: number, unit: string, touched: boolean | undefined, error: string | undefined, onChange: (e: React.ChangeEvent<any>) => void, onBlur: (e: React.FocusEvent<any>) => void }) {\n    return <Form.Group>\n        <Form.Label>{props.name}</Form.Label>\n        <InputGroup>\n            <FormControl\n                name={props.name.toLowerCase()}\n                placeholder={props.name}\n                type=\"number\"\n                step=\"any\"\n                onChange={props.onChange}\n                onBlur={props.onBlur}\n                className={props.touched ? props.error ? \"is-invalid\" : \"is-valid\" : undefined}\n                value={props.value}\n            />\n            <InputGroup.Append>\n                <InputGroup.Text>{props.unit}</InputGroup.Text>\n            </InputGroup.Append>\n            <Form.Control.Feedback type=\"invalid\">{props.error}</Form.Control.Feedback>\n        </InputGroup>\n\n    </Form.Group>\n}\n\nfunction CreateFoodModal(props: { food: model.Food, save: (food: model.Food) => any, discard: () => any }) {\n    return (<Modal show onHide={props.discard}>\n        <Formik\n            initialValues={{...props.food, name: \"\"}}\n            onSubmit={(values, actions) => {\n                props.save(values);\n            }}\n            validationSchema={yup.object().shape({\n                name: yup.string()\n                    .required(),\n                quantity: yup.number()\n                    .positive()\n                    .required(),\n                unit: yup.string()\n                    .oneOf([\"g\"], \"Only 'g' is currently supported\")\n                    .required(),\n                energy: yup.number()\n                    .min(0)\n                    .required(),\n                fat: yup.number()\n                    .min(0)\n                    .required(),\n                carbohydrates: yup.number()\n                    .min(0)\n                    .required(),\n                protein: yup.number()\n                    .min(0)\n                    .required(),\n            })}\n        >\n            {({\n                  values,\n                  errors,\n                  touched,\n                  handleChange,\n                  handleBlur,\n                  handleSubmit,\n                  isSubmitting\n              }) => (\n                <Form onSubmit={handleSubmit}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Create food</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Form.Group>\n                            <Form.Label>Name</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                name=\"name\"\n                                placeholder={\"Name\"}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.name}\n                                className={touched.name ? errors.name ? \"is-invalid\" : \"is-valid\" : undefined}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">{errors.name}</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Row>\n                            <Form.Group as={Col}>\n                                <Form.Label>Quantity</Form.Label>\n                                <FormControl\n                                    type=\"number\"\n                                    name=\"quantity\"\n                                    placeholder=\"Quantity\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    className={touched.quantity ? errors.quantity ? \"is-invalid\" : \"is-valid\" : undefined}\n                                    value={values.quantity}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">{errors.quantity}</Form.Control.Feedback>\n                            </Form.Group>\n                            <Form.Group as={Col}>\n                                <Form.Label>Unit</Form.Label>\n                                <FormControl\n                                    type=\"text\"\n                                    name=\"unit\"\n                                    placeholder=\"Unit\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    className={touched.unit ? errors.unit ? \"is-invalid\" : \"is-valid\" : undefined}\n                                    value={values.unit}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">{errors.unit}</Form.Control.Feedback>\n                            </Form.Group>\n                        </Form.Row>\n                        <hr/>\n                        <NutrientInput\n                            name=\"Energy\"\n                            unit=\"kJ\"\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            touched={touched.energy}\n                            error={errors.energy}\n                            value={values.energy}\n                        />\n                        <NutrientInput\n                            name=\"Fat\"\n                            unit=\"g\"\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            touched={touched.fat}\n                            error={errors.fat}\n                            value={values.fat}\n                        />\n                        <NutrientInput\n                            name=\"Carbohydrates\"\n                            unit=\"g\"\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            touched={touched.carbohydrates}\n                            error={errors.carbohydrates}\n                            value={values.carbohydrates}\n                        />\n                        <NutrientInput\n                            name=\"Protein\"\n                            unit=\"g\"\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            touched={touched.protein}\n                            error={errors.protein}\n                            value={values.protein}\n\n                        />\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button type=\"submit\" variant=\"primary\" disabled={isSubmitting}>\n                            Save\n                        </Button>\n                    </Modal.Footer>\n                </Form>\n            )}\n        </Formik>\n    </Modal>)\n}\n\n\nfunction FoodsPage({defaultFoods}: { defaultFoods: List<model.Food> }) {\n    const [foods, setFoods] = useState(defaultFoods);\n    const [copying, setCopying] = useState<model.Food | null>(null)\n\n    return (<>\n        {copying !== null &&\n        <CreateFoodModal\n            food={copying}\n            save={(food) => {\n                setFoods(foods.insert(0, food));\n                setCopying(null);\n            }}\n            discard={() => setCopying(null)}\n        />\n        }\n        <Container>\n            <ListGroup>\n                {foods.map((food) => <Summary\n                    food={food}\n                    key={food.id}\n                    onCopy={() => setCopying({...food, id: \"food-\" + nanoid()})}\n                />)}\n            </ListGroup>\n        </Container>\n    </>)\n}\n\n\nexport default FoodsPage;\n","import React from 'react';\nimport './App.scss';\nimport {Nav, Navbar} from 'react-bootstrap';\nimport * as model from './model';\nimport FoodsPage from './components/Foods';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Navbar expand=\"lg\" variant=\"light\" bg=\"light\">\n                <Navbar.Brand>NutritionDiary</Navbar.Brand>\n                <Nav>\n                    <Nav.Link href=\"#foods\">Foods</Nav.Link>\n                </Nav>\n            </Navbar>\n            <FoodsPage defaultFoods={model.sample_foods}/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}